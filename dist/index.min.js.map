{"version":3,"sources":["webpack://library/webpack/universalModuleDefinition","webpack://library/webpack/bootstrap","webpack://library/./src/utils.ts","webpack://library/./src/index.ts","webpack://library/external \"events\"","webpack://library/external \"fs\"","webpack://library/external \"path\"","webpack://library/external \"util\"","webpack://library/./src/reader.ts","webpack://library/./src/book.ts","webpack://library/./src/row.ts","webpack://library/./src/cell.ts","webpack://library/./src/sheet.ts","webpack://library/./src/xml.ts","webpack://library/external \"sax\"","webpack://library/external \"node-expat\"","webpack://library/./src/defaults.ts","webpack://library/external \"os\"","webpack://library/./src/unzip.ts","webpack://library/external \"yauzl\""],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","date1904","ignore_timezone","date","Math","floor","time","round","Date","setDate","getDate","setSeconds","setMinutes","getTimezoneOffset","setHours","xlsx_fmts","0","1","2","3","4","9","10","11","12","13","14","15","16","17","18","19","20","21","22","37","38","39","40","45","46","47","48","49","Alphabet","alphaNum","result","multiplier","length","charCodeAt","containsOnlyChars","chars","indexOf","parseFmtType","fmt","b","slice","sp","replace","split","trim","isNaN","parseInt","di","f","numAlpha","charAt","fmts","last","ff","push","fmt_type","digits","colDef","cc","getTime","val","options","delimiter","tsv_delimiter","unescapexml","text","encodings","$$","$1","String","fromCharCode","j","util","inherits","XLSX","events","EventEmitter","extract","filename","XLSXReader","read","what","data","emit","this","convert","destfile","format","path","extname","toLowerCase","writeable","start","isJSON","fs","createWriteStream","write","e","on","tsv_endofline","end","require","applyDefaults","workfolder","createParser","parser","SaxExpat","SaxSax","createUnzip","YauzlUnzip","parseXMLSheet","entry","workbook","cb","row","cell","addvalue","addformular","rownum","sax","onStartElement","attrs","include_empty_rows","rownr","Row","Cell","typ","styles","undefined","address","col","getColumnFromDef","count","empty","onEndElement","cells","sharedStrings","raw","raw_values","convertValue","onText","txt","formula","onClose","pipe","piper","parseXMLWorkbookSheets","sheets","sheet","Sheet","rid","id","sheetid","nr","toString","err","parseXMLWorkbookRelations","relations","target","parseXMLStyles","formatstyles","numFmts","cellXfs","cellXfs_collect","numfmtid","formatcode","fmtnr","stylenr","splitCellFormats","def","parseXMLStrings","strings","collect_strings","sl","phonetic","join","getLookups","sheet_all","forEach","rel","find","sheet_name","getByName","sheet_rid","getByRId","sheet_id","getById","sheet_nr","getByNr","parseSheets","running","finish","lookups","lookup","ignore_header","ignore","parseWorkbook","Workbook","collecting","checkStartParseSheet","part","getFormat","toJson","toArray","toTSV","map","JSON","stringify","isEmpty","filter","isValidDate","toISOString","tsv_float_comma","escapeTSV","getEffectiveNumFormat","applyNumFormat","convert_values","dates","xlsx_date","ints","parseFloat","floats","round_floats","toFixed","v","bools","expat","lowerFudge","obj","keys","createStream","lowercase","notify","node","attributes","reported","error","resume","Error","defaults","EOL","assign","zipfile","fileName","openReadStream","readStream","readEntry","YauzlUnzipEntry","onEntry","onError","open","lazyEntries","autoClose","err2","test","wrapper","once"],"mappings":"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","file":"index.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"library\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"library\"] = factory();\n\telse\n\t\troot[\"library\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","import {ICellFormat} from './cell';\nimport {IXLSXExtractOptions} from './types';\n\n/**\n converts a raw xlsx-date to js date\n */\nexport function xlsx_date(value: number, date1904: boolean, ignore_timezone: boolean): Date {\n\tlet date = Math.floor(value),\n\t\ttime = Math.round(86400 * (value - date)),\n\t\td;\n\tif (date1904) {\n\t\tdate += 1462;\n\t}\n\t// Open XML stores dates as the number of days from 1 Jan 1900. Well, skipping the incorrect 29 Feb 1900 as a valid day.\n\tif (date === 60) {\n\t\td = new Date(1900, 1, 29);\n\t} else {\n\t\tif (date > 60) {\n\t\t\t--date;\n\t\t}\n\t\t/* 1 = Jan 1 1900 */\n\t\td = new Date(1900, 0, 1, 0, 0, 0);\n\t\td.setDate(d.getDate() + date - 1);\n\t}\n\td.setSeconds(time % 60);\n\ttime = Math.floor(time / 60);\n\td.setMinutes(time % 60);\n\ttime = Math.floor(time / 60);\n\tif (!ignore_timezone) {\n\t\ttime -= d.getTimezoneOffset() / 60;\n\t}\n\td.setHours(time);\n\treturn d;\n}\n\n/**\n xlsx build in nr formats\n */\nexport const xlsx_fmts: { [id: number]: string | null } = {\n\t0: null, // General\n\t1: '0',\n\t2: '0.00',\n\t3: '#,##0',\n\t4: '#,##0.00',\n\n\t9: '0%',\n\t10: '0.00%',\n\t11: '0.00E+00',\n\t12: '# ?/?',\n\t13: '# ??/??',\n\t14: 'mm-dd-yy',\n\t15: 'd-mmm-yy',\n\t16: 'd-mmm',\n\t17: 'mmm-yy',\n\t18: 'h:mm AM/PM',\n\t19: 'h:mm:ss AM/PM',\n\t20: 'h:mm',\n\t21: 'h:mm:ss',\n\t22: 'm/d/yy h:mm',\n\n\t37: '#,##0 ;(#,##0)',\n\t38: '#,##0 ;[Red](#,##0)',\n\t39: '#,##0.00;(#,##0.00)',\n\t40: '#,##0.00;[Red](#,##0.00)',\n\n\t45: 'mm:ss',\n\t46: '[h]:mm:ss',\n\t47: 'mmss.0',\n\t48: '##0.0E+0',\n\t49: '@'\n};\n\nconst Alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n converts a column index to chars e.g. 1 -> A\n */\nexport function numAlpha(i: number): string {\n\tconst t = Math.floor(i / 26) - 1;\n\treturn (t > -1 ? numAlpha(t) : '') + Alphabet.charAt(i % 26);\n}\n\n/**\n converts a chars to column index e.g. A -> 1\n */\nexport function alphaNum(name: string) {\n\tlet result = 0;\n\tlet multiplier = 1;\n\tfor (let i = name.length - 1; i >= 0; i--) {\n\t\tconst value = ((name[i].charCodeAt(0) - 'A'.charCodeAt(0)) + 1);\n\t\tresult = result + value * multiplier;\n\t\tmultiplier = multiplier * 26;\n\t}\n\treturn (result - 1);\n}\n\n/**\n split and parse cell formats\n */\nexport function containsOnlyChars(value: string, chars: string): boolean {\n\tfor (let i = 0; i < value.length; i++) {\n\t\tif (chars.indexOf(value[i]) < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn (value.length > 0);\n}\n\n/**\n splits and parse cell formats\n */\nexport function splitCellFormats(s: string): Array<ICellFormat> {\n\t/*\n\t http://office.microsoft.com/en-gb/excel-help/create-or-delete-a-custom-number-format-HP005199500.aspx?redir=0\n\t _-* #,##0\\ _€_-;\\-* #,##0\\ _€_-;_-* \"-\"??\\ _€_-;_-@_-\n\t positive value ; negative value ; zero; string\n\t */\n\tconst fmts = s.split(/(?!\\\\);/);\n\tlet nr = 0;\n\tlet last = {t: 'x'};\n\tconst result: Array<ICellFormat> = [];\n\tfor (let i = 0; i < fmts.length; i++) {\n\t\tlet ff = parseFmtType(fmts[i]);\n\t\tff = (ff.t === 'l' ? last : ff);\n\t\tlast = ff;\n\t\tresult.push({fmt: fmts[i], fmt_type: ff.t, digits: ff.f});\n\t\tnr++;\n\t}\n\treturn result;\n}\n\n/**\n parse cell format\n */\nfunction parseFmtType(fmt: string): { t: string, f?: number } {\n\t// messy hack for extracting some info from the number format (type and float-digits}\n\tlet s = fmt;\n\tlet b = '';\n\twhile (s.length > 0) {\n\t\tconst c = s[0];\n\t\ts = s.slice(1);\n\t\tif ((c === '_') || (c === '\\\\') || (c === '*')) {\n\t\t\ts = s.slice(1);\n\t\t} else if (c === '[') {\n\t\t\ts = s.slice(s.indexOf(']') + 1);\n\t\t} else if (c === '\"') {\n\t\t\ts = s.slice(s.indexOf('\"') + 1);\n\t\t} else if ((c === '(') || (c === ')')) {\n\t\t\t// nop\n\t\t} else {\n\t\t\tb += c;\n\t\t}\n\t}\n\tb = b.replace(/#/g, '0').replace(/%/g, '');\n\t// deal with thousands separator 12000 -> 12 -> formatCode\t'#,'\n\tlet sp = b.split(',');\n\tb = sp[sp.length - 1];\n\tif (b === '' || (b.trim().indexOf(' ') < 0) && !isNaN(parseInt(b, 10))) {\n\t\tif (b.indexOf('.') >= 0) {\n\t\t\tlet di = sp[sp.length - 1].split('.')[1].trim().length;\n\t\t\tif (b.indexOf('E+') >= 0) {\n\t\t\t\tdi += 14;\n\t\t\t}\n\t\t\treturn {t: 'f', f: di};\n\t\t} else {\n\t\t\treturn {t: 'i'};\n\t\t}\n\t} else if (b === '@') {\n\t\treturn {t: 's'};\n\t}\n\t// '-'?? zero value\n\tif (b === '??') {\n\t\treturn {t: 'l'}; // last fmt should by used\n\t}\n\tsp = b.split(' ');\n\t// test '# ??/??'\n\tif ((sp.length > 1) && (containsOnlyChars(sp[sp.length - 1], '?/'))) {\n\t\t// '# ?/?' or '# ??/??',\n\t\tconst digits = sp[sp.length - 1].split('/')[0].trim().length + 1;\n\t\treturn {t: 'f', f: digits};\n\t}\n\t// date format?\n\tif (containsOnlyChars(b, 'tmdyhseAPTMH:/-.0 ')) {\n\t\treturn {t: 'd'};\n\t}\n\treturn {t: 'x'};\n}\n\n/*\n A1 -> 0\n A2 -> 0\n B2 -> 1\n */\nexport function getColumnFromDef(colDef: string): number {\n\tlet cc = '';\n\tfor (let i = 0; i < colDef.length; i++) {\n\t\tif (isNaN(parseInt(colDef[i], 10))) {\n\t\t\tcc += colDef[i];\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn alphaNum(cc);\n}\n\nexport function isValidDate(d: any): boolean {\n\treturn d instanceof Date && !isNaN(d.getTime());\n}\n\nexport function escapeTSV(val: string, options: IXLSXExtractOptions): string {\n\tconst delimiter = options.tsv_delimiter || '\\t';\n\tif (val && val.indexOf('\"') > -1 || val.indexOf('\\n') > -1 || val.indexOf('\\r') > -1 || val.indexOf(delimiter) > -1) {\n\t\tval = '\"' + val.replace(/\"/g, '\"\"') + '\"';\n\t}\n\treturn val;\n}\n\nexport function unescapexml(text: string): string {\n\tconst encregex = /&(?:quot|apos|gt|lt|amp|#x?([\\da-fA-F]+));/g;\n\tconst coderegex = /_x([\\da-fA-F]{4})_/g;\n\tconst encodings: { [key: string]: string } = {\n\t\t'&quot;': '\"',\n\t\t'&apos;': '\\'',\n\t\t'&gt;': '>',\n\t\t'&lt;': '<',\n\t\t'&amp;': '&'\n\t};\n\tconst s = text + '';\n\tconst i = s.indexOf('<![CDATA[');\n\tif (i === -1) {\n\t\treturn s.replace(encregex, function($$, $1) {\n\t\t\treturn encodings[$$] || String.fromCharCode(parseInt($1, $$.indexOf('x') > -1 ? 16 : 10)) || $$;\n\t\t}).replace(coderegex, function(m, c) {\n\t\t\treturn String.fromCharCode(parseInt(c, 16));\n\t\t});\n\t}\n\tconst j = s.indexOf(']]>');\n\treturn unescapexml(s.slice(0, i)) + s.slice(i + 9, j) + unescapexml(s.slice(j + 3));\n\n}\n","import {IXLSXExtractOptions} from './types';\nimport * as events from 'events';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\nimport * as util from 'util';\nimport {XLSXReader} from './reader';\n\nexport class XLSX extends events.EventEmitter {\n\n\tconstructor() {\n\t\tsuper();\n\t\tutil.inherits(XLSX, events.EventEmitter);\n\t\tevents.EventEmitter.call(this);\n\t}\n\n\textract(filename: string, options?: IXLSXExtractOptions): XLSX {\n\t\tconst reader = new XLSXReader(filename, options);\n\t\treader.read((what: string, data: any) => {\n\t\t\tthis.emit(what, data);\n\t\t});\n\t\treturn this;\n\t}\n\n\tconvert(filename: string, destfile: string, options: IXLSXExtractOptions): XLSX {\n\t\toptions = options || {};\n\n\t\tif ((!options.format) && ((path.extname(destfile).toLowerCase() === '.json'))) {\n\t\t\toptions.format = 'json';\n\t\t}\n\t\tif (options.format !== 'json') {\n\t\t\toptions.format = 'tsv';\n\t\t}\n\n\t\tlet start = true;\n\t\tconst isJSON = options.format !== 'tsv';\n\t\tlet writeable: fs.WriteStream;\n\t\ttry {\n\t\t\twriteable = fs.createWriteStream(destfile);\n\t\t\tif (isJSON) {\n\t\t\t\twriteable.write('[');\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.emit('error', e);\n\t\t\tthis.emit('end');\n\t\t\treturn this;\n\t\t}\n\t\twriteable.on('close', () => {\n\t\t\tthis.emit('end');\n\t\t});\n\t\tconst reader = new XLSXReader(filename, options);\n\t\treader.read((what, data) => {\n\t\t\tswitch (what) {\n\t\t\t\tcase 'error':\n\t\t\t\t\tthis.emit('error', data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'cell':\n\t\t\t\t\tthis.emit('cell', data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'row':\n\t\t\t\t\tif (isJSON) {\n\t\t\t\t\t\tif (start) {\n\t\t\t\t\t\t\tstart = false;\n\t\t\t\t\t\t\twriteable.write(options.tsv_endofline);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twriteable.write(',' + options.tsv_endofline);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.emit('row', data);\n\t\t\t\t\twriteable.write(data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'end':\n\t\t\t\t\tif (isJSON) {\n\t\t\t\t\t\twriteable.write(options.tsv_endofline + ']');\n\t\t\t\t\t}\n\t\t\t\t\twriteable.end();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n}\n","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","module.exports = require(\"util\");","import {getColumnFromDef, splitCellFormats, xlsx_fmts} from './utils';\nimport {Workbook} from './book';\nimport {Row} from './row';\nimport {Cell, ICellFormatStyles} from './cell';\nimport {IXLSXExtractOptions} from './types';\nimport {Sheet} from './sheet';\nimport {ISaxParser, SaxExpat, SaxSax} from './xml';\nimport {applyDefaults} from './defaults';\nimport {IUnzip, IUnzipEntry, YauzlUnzip} from './unzip';\n\nexport class XLSXReader {\n\tfilename: string;\n\toptions: IXLSXExtractOptions = {};\n\tworkfolder: string;\n\n\tconstructor(filename: string, options?: IXLSXExtractOptions) {\n\t\tthis.filename = filename;\n\t\tthis.options = applyDefaults(options);\n\t\tthis.workfolder = this.options.workfolder || 'xl';\n\t}\n\n\tprivate createParser(): ISaxParser {\n\t\tif (this.options.parser === 'expat') {\n\t\t\treturn new SaxExpat();\n\t\t}\n\t\treturn new SaxSax();\n\t}\n\n\tprivate createUnzip(): IUnzip {\n\t\treturn new YauzlUnzip();\n\t}\n\n\tprivate parseXMLSheet(entry: IUnzipEntry, workbook: Workbook, emit: (row?: Row | null, cell?: Cell | null) => void, cb: (err?: Error) => void) {\n\t\t/*\n\t\t converts cell value according to the cell type & number format\n\t\t */\n\t\tlet addvalue = false;\n\t\tlet addformular = false;\n\t\tlet row: Row;\n\t\tlet rownum = 1;\n\t\tlet cell: Cell;\n\t\tconst sax = this.createParser()\n\t\t\t.onStartElement((name, attrs) => {\n\t\t\t\tif (name === 'row') {\n\t\t\t\t\tif (this.options.include_empty_rows) {\n\t\t\t\t\t\tconst rownr = parseInt(attrs.r || '', 10);\n\t\t\t\t\t\t// TODO: if rows are not sorted, we are screwed - track and warn user if so\n\t\t\t\t\t\t// reading them first and sort is not wanted, since rows are streamed\n\t\t\t\t\t\twhile (rownum < rownr) {\n\t\t\t\t\t\t\trownum++;\n\t\t\t\t\t\t\temit(new Row());\n\t\t\t\t\t\t}\n\t\t\t\t\t\trownum = rownr + 1;\n\t\t\t\t\t}\n\t\t\t\t\trow = new Row();\n\t\t\t\t} else if (name === 'c') {\n\t\t\t\t\tcell = new Cell();\n\t\t\t\t\tcell.typ = (attrs.t ? attrs.t : 'n');\n\t\t\t\t\tcell.fmt = attrs.s ? workbook.styles[attrs.s] : undefined;\n\t\t\t\t\tcell.address = attrs.r;\n\t\t\t\t\tcell.col = getColumnFromDef(attrs.r || '');\n\t\t\t\t\t// TODO: if cols are not sorted, we are screwed - track and warn user if so\n\t\t\t\t\twhile (row.count() < cell.col) {\n\t\t\t\t\t\tconst empty = new Cell();\n\t\t\t\t\t\tempty.col = row.count();\n\t\t\t\t\t\trow.push(empty);\n\t\t\t\t\t\temit(null, cell);\n\t\t\t\t\t}\n\t\t\t\t\trow.push(cell);\n\t\t\t\t} else if (name === 'v') {\n\t\t\t\t\taddvalue = true;\n\t\t\t\t} else if (name === 't') { // support for inline text <c t=\"inlineStr\"><is><t>Product</t></is></c>\n\t\t\t\t\taddvalue = true;\n\t\t\t\t} else if (name === 'f') {\n\t\t\t\t\taddformular = true;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onEndElement((name) => {\n\t\t\t\tif (name === 'row') {\n\t\t\t\t\tif (row) {\n\t\t\t\t\t\tif (row.cells.length > 0 || this.options.include_empty_rows) {\n\t\t\t\t\t\t\temit(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (name === 'v') {\n\t\t\t\t\taddvalue = false;\n\t\t\t\t} else if (name === 't') {\n\t\t\t\t\taddvalue = false;\n\t\t\t\t} else if (name === 'f') {\n\t\t\t\t\taddformular = false;\n\t\t\t\t} else if (name === 'c') {\n\t\t\t\t\taddvalue = false;\n\t\t\t\t\tif (cell.col !== undefined && cell.col >= 0) {\n\t\t\t\t\t\tif (cell.typ === 's') {\n\t\t\t\t\t\t\tcell.val = workbook.sharedStrings[parseInt(cell.val, 10)];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcell.raw = cell.val;\n\t\t\t\t\t\tif (!this.options.raw_values) {\n\t\t\t\t\t\t\tcell.convertValue(this.options);\n\t\t\t\t\t\t}\n\t\t\t\t\t\temit(null, cell);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onText((txt: string) => {\n\t\t\t\tif (addvalue) {\n\t\t\t\t\tcell.val = (cell.val ? cell.val : '') + txt;\n\t\t\t\t}\n\t\t\t\tif (addformular) {\n\t\t\t\t\tcell.formula = (cell.formula ? cell.formula : '') + txt;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onClose(cb);\n\t\tentry.pipe(sax.piper());\n\t}\n\n\tprivate parseXMLWorkbookSheets(entry: IUnzipEntry, cb: (err: Error | undefined, sheets: Array<Sheet>) => void) {\n\t\tconst sheets: Array<Sheet> = [];\n\t\tconst sax = this.createParser()\n\t\t\t.onStartElement((name, attrs) => {\n\t\t\t\tif (name === 'sheet') {\n\t\t\t\t\tconst sheet = new Sheet();\n\t\t\t\t\tsheet.rid = attrs['r:id'] || '';\n\t\t\t\t\tsheet.id = attrs.sheetid;\n\t\t\t\t\tsheet.nr = (sheets.length + 1).toString();\n\t\t\t\t\tsheet.name = attrs.name;\n\t\t\t\t\tsheets.push(sheet);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onClose((err) => {\n\t\t\t\tcb(err, sheets);\n\t\t\t});\n\t\tentry.pipe(sax.piper());\n\t}\n\n\tprivate parseXMLWorkbookRelations(entry: IUnzipEntry, cb: (err: Error | undefined, relations: Array<{ sheetid: string, filename: string }>) => void) {\n\t\tconst relations: Array<{ sheetid: string, filename: string }> = [];\n\t\tconst sax = this.createParser()\n\t\t\t.onStartElement((name, attrs) => {\n\t\t\t\tif (\n\t\t\t\t\t(name === 'relationship') &&\n\t\t\t\t\t(typeof attrs.target === 'string') &&\n\t\t\t\t\t(attrs.target.toLowerCase().indexOf('worksheets/sheet') >= 0) &&\n\t\t\t\t\tattrs.id) {\n\t\t\t\t\trelations.push({sheetid: attrs.id, filename: attrs.target});\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onClose((err) => {\n\t\t\t\tcb(err, relations);\n\t\t\t});\n\t\tentry.pipe(sax.piper());\n\t}\n\n\tprivate parseXMLStyles(entry: IUnzipEntry, cb: (err: Error | undefined, formatstyles: ICellFormatStyles) => void) {\n\t\tconst formatstyles: ICellFormatStyles = {};\n\t\tconst numFmts: { [id: string]: string } = {};\n\t\tconst cellXfs: Array<number> = [];\n\t\tlet cellXfs_collect = false;\n\t\tconst sax = this.createParser()\n\t\t\t.onStartElement((name, attrs) => {\n\t\t\t\tif (name === 'numfmt') {\n\t\t\t\t\tif (attrs.numfmtid && attrs.formatcode) {\n\t\t\t\t\t\tnumFmts[attrs.numfmtid] = attrs.formatcode;\n\t\t\t\t\t}\n\t\t\t\t} else if (name === 'cellxfs') {\n\t\t\t\t\tcellXfs_collect = true;\n\t\t\t\t} else if ((cellXfs_collect) && (name === 'xf')) {\n\t\t\t\t\tconst fmtnr = parseInt(attrs.numfmtid || '', 10);\n\t\t\t\t\tcellXfs.push(fmtnr);\n\t\t\t\t\tconst stylenr = (cellXfs.length - 1).toString();\n\t\t\t\t\tconst fmt = numFmts[fmtnr] || xlsx_fmts[fmtnr];\n\t\t\t\t\tformatstyles[stylenr] = {\n\t\t\t\t\t\tfmt: fmt === null ? undefined : fmt,\n\t\t\t\t\t\tfmtnr: fmtnr,\n\t\t\t\t\t\tfmts: (fmt ? splitCellFormats(fmt) : []),\n\t\t\t\t\t\tdef: attrs\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onEndElement((name: string) => {\n\t\t\t\tif (name === 'cellxfs') {\n\t\t\t\t\tcellXfs_collect = false;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onClose((err) => {\n\t\t\t\tcb(err, formatstyles);\n\t\t\t});\n\t\tentry.pipe(sax.piper());\n\t}\n\n\tprivate parseXMLStrings(entry: IUnzipEntry, cb: (err: Error | undefined, strings: Array<string>) => void) {\n\t\tconst strings: Array<string> = [];\n\t\tlet collect_strings = false;\n\t\tlet sl: Array<string> = [];\n\t\tlet s = '';\n\t\tlet phonetic = false;\n\t\tconst sax = this.createParser()\n\t\t\t.onStartElement((name, attrs) => {\n\t\t\t\tif (name === 'si') {\n\t\t\t\t\tsl = [];\n\t\t\t\t} else if (name === 't') {\n\t\t\t\t\tcollect_strings = true;\n\t\t\t\t\ts = '';\n\t\t\t\t} else if (name === 'rph') {\n\t\t\t\t\tphonetic = true;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onEndElement((name) => {\n\t\t\t\tif (name === 't') {\n\t\t\t\t\tsl.push(s);\n\t\t\t\t\tcollect_strings = false;\n\t\t\t\t} else if (name === 'rph') {\n\t\t\t\t\tphonetic = false;\n\t\t\t\t} else if (name === 'si') {\n\t\t\t\t\tstrings.push(sl.join(''));\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onText((txt) => {\n\t\t\t\tif (collect_strings && !phonetic) {\n\t\t\t\t\ts = s + txt.replace(/\\r\\n/g, '\\n');\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onClose((err) => {\n\t\t\t\tcb(err, strings);\n\t\t\t});\n\t\tentry.pipe(sax.piper());\n\t}\n\n\tprivate getLookups(workbook: Workbook): Array<{ sheet?: Sheet, filename: string }> {\n\t\tconst result: Array<{ sheet?: Sheet, filename: string }> = [];\n\t\tif (this.options.sheet_all) {\n\t\t\tworkbook.sheets.forEach(s => {\n\t\t\t\tconst rel = workbook.relations.find(r => r.sheetid === s.rid);\n\t\t\t\tif (rel) {\n\t\t\t\t\tresult.push({sheet: s, filename: this.workfolder + '/' + rel.filename});\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn result;\n\t\t}\n\t\tlet sheet: Sheet | undefined;\n\t\tif (this.options.sheet_name) {\n\t\t\tsheet = workbook.getByName(this.options.sheet_name);\n\t\t} else if (this.options.sheet_rid) {\n\t\t\tsheet = workbook.getByRId(this.options.sheet_rid.toString());\n\t\t} else if (this.options.sheet_id) {\n\t\t\tconst sheet_id = this.options.sheet_id.toString();\n\t\t\tsheet = workbook.getById(sheet_id);\n\t\t} else {\n\t\t\tconst sheet_nr = this.options.sheet_nr || '1';\n\t\t\tsheet = workbook.getByNr(sheet_nr);\n\t\t\tif (!sheet) {\n\t\t\t\tresult.push({filename: this.workfolder + '/worksheets/sheet' + sheet_nr + '.xml'});\n\t\t\t}\n\t\t}\n\t\tif (sheet) {\n\t\t\tconst sheetId = sheet.rid;\n\t\t\tconst rel = workbook.relations.find(r => r.sheetid === sheetId);\n\t\t\tif (rel) {\n\t\t\t\tresult.push({sheet, filename: this.workfolder + '/' + rel.filename});\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate parseSheets(workbook: Workbook, emit: (part: { err?: Error, cell?: Cell, row?: Row, sheet?: Sheet }) => void) {\n\t\tlet running = 1;\n\n\t\tconst finish = () => {\n\t\t\tif (running === 0) {\n\t\t\t\temit({});\n\t\t\t}\n\t\t};\n\t\tconst lookups = this.getLookups(workbook);\n\t\tconst unzip = this.createUnzip();\n\t\tunzip.read(this.filename,\n\t\t\tentry => {\n\t\t\t\tconst lookup = lookups.find(l => l.filename === entry.path);\n\t\t\t\tif (lookup) {\n\t\t\t\t\trunning++;\n\t\t\t\t\tlet row_count = 1;\n\t\t\t\t\tconst row_start = this.options.ignore_header || 0;\n\t\t\t\t\tif (lookup.sheet) {\n\t\t\t\t\t\temit({sheet: lookup.sheet});\n\t\t\t\t\t}\n\t\t\t\t\tthis.parseXMLSheet(entry, workbook, (row, cell) => {\n\t\t\t\t\t\tif (cell) {\n\t\t\t\t\t\t\tif (row_count > row_start) {\n\t\t\t\t\t\t\t\temit({cell: cell});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (row) {\n\t\t\t\t\t\t\tif (row_count > row_start) {\n\t\t\t\t\t\t\t\temit({row: row});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\trow_count++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}, (err) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\temit({err: err});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trunning--;\n\t\t\t\t\t\t\tfinish();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tentry.ignore();\n\t\t\t\t}\n\t\t\t},\n\t\t\terr => {\n\t\t\t\temit({err});\n\t\t\t\temit({});\n\t\t\t},\n\t\t\t() => {\n\t\t\t\trunning--;\n\t\t\t\tfinish();\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate parseWorkbook(emit: (part: { err?: Error, cell?: Cell, row?: Row, sheet?: Sheet }) => void) {\n\t\tconst workbook = new Workbook();\n\t\tlet collecting = 1;\n\n\t\tconst checkStartParseSheet = () => {\n\t\t\tcollecting--;\n\t\t\tif (collecting === 0) {\n\t\t\t\tthis.parseSheets(workbook, emit);\n\t\t\t}\n\t\t};\n\n\t\t// first get styles & strings\n\t\t// TODO: is there really no memory friendly way to NOT read zip stream twice for styles/strings/etc and then for sheets?\n\t\tconst unzip = this.createUnzip();\n\t\tunzip.read(this.filename,\n\t\t\tentry => {\n\t\t\t\tif (entry.path === this.workfolder + '/sharedStrings.xml') {\n\t\t\t\t\tcollecting++;\n\t\t\t\t\tthis.parseXMLStrings(entry, (err, strings) => {\n\t\t\t\t\t\tworkbook.sharedStrings = strings;\n\t\t\t\t\t\tcheckStartParseSheet();\n\t\t\t\t\t});\n\t\t\t\t} else if (entry.path === this.workfolder + '/styles.xml') {\n\t\t\t\t\tcollecting++;\n\t\t\t\t\tthis.parseXMLStyles(entry, (err, formatstyles) => {\n\t\t\t\t\t\tworkbook.styles = formatstyles;\n\t\t\t\t\t\tcheckStartParseSheet();\n\t\t\t\t\t});\n\t\t\t\t} else if (entry.path === this.workfolder + '/workbook.xml') {\n\t\t\t\t\tcollecting++;\n\t\t\t\t\tthis.parseXMLWorkbookSheets(entry, (err, sheets) => {\n\t\t\t\t\t\tworkbook.sheets = sheets;\n\t\t\t\t\t\tcheckStartParseSheet();\n\t\t\t\t\t});\n\t\t\t\t} else if (entry.path === this.workfolder + '/_rels/workbook.xml.rels') {\n\t\t\t\t\tcollecting++;\n\t\t\t\t\tthis.parseXMLWorkbookRelations(entry, (err, relations) => {\n\t\t\t\t\t\tworkbook.relations = relations;\n\t\t\t\t\t\tcheckStartParseSheet();\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tentry.ignore();\n\t\t\t\t}\n\t\t\t},\n\t\t\terr => {\n\t\t\t\temit({err});\n\t\t\t\temit({});\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tcheckStartParseSheet();\n\t\t\t}\n\t\t);\n\t}\n\n\tread(emit: (what: string, data?: any) => void) {\n\t\tthis.parseWorkbook(part => {\n\t\t\tif (part.err) {\n\t\t\t\temit('error', part.err);\n\t\t\t} else if (part.cell) {\n\t\t\t\temit('cell', part.cell.getFormat(this.options));\n\t\t\t} else if (part.row) {\n\t\t\t\temit('row', part.row.getFormat(this.options));\n\t\t\t} else if (part.sheet) {\n\t\t\t\temit('sheet', part.sheet.getFormat(this.options));\n\t\t\t} else {\n\t\t\t\temit('end');\n\t\t\t}\n\t\t});\n\t}\n}\n","import {Sheet} from './sheet';\nimport {ICellFormatStyles} from './cell';\n\nexport class Workbook {\n\tsheets: Array<Sheet> = [];\n\tsharedStrings: Array<string> = [];\n\tstyles: ICellFormatStyles = {};\n\trelations: Array<{ sheetid: string, filename: string }> = [];\n\n\tgetByRId(id: string): Sheet | undefined {\n\t\treturn this.sheets.find(sheet => sheet.rid === id);\n\t}\n\n\tgetById(id: string): Sheet | undefined {\n\t\treturn this.sheets.find(sheet => sheet.id === id);\n\t}\n\n\tgetByNr(nr: string): Sheet | undefined {\n\t\treturn this.sheets.find((sheet) => {\n\t\t\treturn !!sheet.nr && sheet.nr.toString() === nr.toString();\n\t\t});\n\t}\n\n\tgetByName(name: string): Sheet | undefined {\n\t\treturn this.sheets.find(sheet => sheet.name === name);\n\t}\n}\n","import {Cell} from './cell';\nimport {IXLSXExtractOptions} from './types';\n\nexport class Row {\n\tcells: Array<Cell> = [];\n\n\tgetFormat(options: IXLSXExtractOptions) {\n\t\tswitch (options.format) {\n\t\t\tcase 'json':\n\t\t\t\treturn this.toJson();\n\t\t\tcase 'array':\n\t\t\t\treturn this.toArray();\n\t\t\tcase 'obj':\n\t\t\t\treturn this;\n\t\t\t// case 'tsv':\n\t\t\tdefault:\n\t\t\t\treturn this.toTSV(options);\n\t\t}\n\t}\n\n\ttoTSV(options: IXLSXExtractOptions): string {\n\t\treturn this.cells.map(cell => cell.toTSV(options)).join(options.tsv_delimiter || '\\t') + options.tsv_endofline;\n\t}\n\n\ttoJson(): string {\n\t\treturn JSON.stringify(this.toArray());\n\t}\n\n\ttoArray(): Array<string | number | undefined> {\n\t\treturn this.cells.map(cell => cell.val);\n\t}\n\n\tpush(cell: Cell) {\n\t\tthis.cells.push(cell);\n\t}\n\n\tcount(): number {\n\t\treturn this.cells.length;\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn (this.cells.length === 0) || (this.cells.filter(function(cell) {\n\t\t\treturn (cell.val !== null);\n\t\t}).length === 0);\n\t}\n}\n","import {escapeTSV, isValidDate, unescapexml, xlsx_date} from './utils';\nimport {IXLSXExtractOptions} from './types';\n\nexport interface ICellFormat {\n\tfmt: string;\n\tfmt_type: string;\n\tdigits?: number;\n}\n\nexport interface ICellFormatStyle {\n\tfmt?: string;\n\tfmtnr?: number;\n\tfmts: Array<ICellFormat>;\n\tdef?: { [key: string]: string | undefined };\n}\n\nexport interface ICellFormatStyles {\n\t[id: string]: ICellFormatStyle;\n}\n\nexport class Cell {\n\tval: any;\n\tcol?: number;\n\taddress?: string;\n\ttyp?: string;\n\tfmt?: ICellFormatStyle;\n\tformula?: string;\n\traw?: string;\n\n\tgetFormat(options: IXLSXExtractOptions) {\n\t\tswitch (options.format) {\n\t\t\tcase 'json':\n\t\t\t\treturn this.toJson();\n\t\t\tcase 'array':\n\t\t\t\treturn this.val;\n\t\t\tcase 'obj':\n\t\t\t\treturn this;\n\t\t\t// case 'tsv':\n\t\t\tdefault:\n\t\t\t\treturn this.toTSV(options);\n\t\t}\n\t}\n\n\ttoTSV(options: IXLSXExtractOptions): string | undefined {\n\t\tlet val: string;\n\t\tif (this.val === null || this.val === undefined || this.raw === undefined) {\n\t\t\tval = '';\n\t\t} else if (isValidDate(this.val)) {\n\t\t\tval = this.val.toISOString();\n\t\t} else {\n\t\t\tval = this.val.toString();\n\t\t}\n\t\tif (options.tsv_float_comma && (typeof this.val === 'number')) {\n\t\t\tval = val.replace('.', ',');\n\t\t}\n\t\treturn escapeTSV(val, options);\n\t}\n\n\ttoJson() {\n\t\treturn JSON.stringify(this.val);\n\t}\n\n\tgetEffectiveNumFormat(): ICellFormat | null {\n\t\tif ((!this.fmt) || (this.fmt.fmts.length === 0)) {\n\t\t\treturn null;\n\t\t}\n\t\tif (this.fmt.fmts.length === 1) {\n\t\t\treturn this.fmt.fmts[0];\n\t\t}\n\t\tif (isNaN(this.val)) {\n\t\t\treturn this.fmt.fmts[3];\n\t\t}\n\t\tif (this.val < 0) {\n\t\t\treturn this.fmt.fmts[1];\n\t\t}\n\t\tif (this.val > 0) {\n\t\t\treturn this.fmt.fmts[0];\n\t\t}\n\t\treturn this.fmt.fmts[(this.fmt.fmts.length > 2) ? 2 : 0];\n\t}\n\n\tapplyNumFormat(options: IXLSXExtractOptions) {\n\t\tconst format = this.getEffectiveNumFormat();\n\t\tif (format && options.convert_values) {\n\t\t\tswitch (format.fmt_type) {\n\t\t\t\tcase 'd':\n\t\t\t\t\tif (options.convert_values.dates) {\n\t\t\t\t\t\tthis.val = xlsx_date(this.val, !!options.date1904, !!options.ignore_timezone);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'i':\n\t\t\t\t\tif (options.convert_values.ints) {\n\t\t\t\t\t\tlet i = null;\n\t\t\t\t\t\tif (this.fmt && (this.fmt.fmt === '0\\\\ %' || this.fmt.fmt === '0%')) {\n\t\t\t\t\t\t\ti = Math.round(parseFloat(this.val) * 100);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ti = parseInt(this.val, 10);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!isNaN(i)) {\n\t\t\t\t\t\t\tthis.val = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'f':\n\t\t\t\t\tif ((format.digits !== undefined) && (format.digits > 0) && options.convert_values.floats) {\n\t\t\t\t\t\tif (options.round_floats && !isNaN(this.val)) {\n\t\t\t\t\t\t\tthis.val = this.val.toFixed(format.digits);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst v = parseFloat(this.val);\n\t\t\t\t\t\tif (!isNaN(v)) {\n\t\t\t\t\t\t\tthis.val = v;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// nop\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tconvertValue(options: IXLSXExtractOptions) {\n\t\tif (this.val !== null) {\n\t\t\tswitch (this.typ) {\n\t\t\t\tcase 'n':\n\t\t\t\t\tconst v = parseFloat(this.val);\n\t\t\t\t\tif (!isNaN(v)) {\n\t\t\t\t\t\tthis.val = v;\n\t\t\t\t\t}\n\t\t\t\t\tif ((this.fmt) && (options.convert_values)) {\n\t\t\t\t\t\tthis.applyNumFormat(options);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'str':\n\t\t\t\t\tif (this.raw) {\n\t\t\t\t\t\tthis.val = unescapexml(this.raw);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 's':\n\t\t\t\tcase 'inlineStr':\n\t\t\t\t\tbreak; // string, do nothing\n\t\t\t\tcase 'b':\n\t\t\t\t\tif (options.convert_values && options.convert_values.bools) {\n\t\t\t\t\t\tif (['0', 'FALSE', 'false'].indexOf(this.val) >= 0) {\n\t\t\t\t\t\t\tthis.val = false;\n\t\t\t\t\t\t} else if (['1', 'TRUE', 'true'].indexOf(this.val) >= 0) {\n\t\t\t\t\t\t\tthis.val = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t// case 'e':\n\t\t\t\t// debug('Error cell type: Value will be invalid (\"#REF!\", \"#NAME?\", \"#VALUE!\" or similar).');\n\t\t\t\t// break;\n\t\t\t\tdefault:\n\t\t\t\t// debug('Unknown cell type: \"%s\"', this.typ);\n\t\t\t}\n\t\t}\n\t}\n}\n","import {IXLSXExtractOptions} from './types';\n\nexport class Sheet {\n\tnr?: string;\n\tid?: string;\n\trid?: string;\n\tname?: string;\n\n\tgetFormat(options: IXLSXExtractOptions): any {\n\t\tswitch (options.format) {\n\t\t\tcase 'json':\n\t\t\t\treturn this.toJson();\n\t\t\tcase 'array':\n\t\t\t\treturn this.toArray();\n\t\t\tcase 'obj':\n\t\t\t\treturn this;\n\t\t\t// case 'tsv':\n\t\t\tdefault:\n\t\t\t\treturn this.toTSV(options);\n\t\t}\n\t}\n\n\ttoTSV(options: IXLSXExtractOptions): string {\n\t\treturn this.toArray().join(options.tsv_delimiter || '\\t') + options.tsv_endofline;\n\t}\n\n\ttoJson(): string {\n\t\treturn JSON.stringify({\n\t\t\tname: this.name,\n\t\t\tnr: this.nr,\n\t\t\trid: this.rid,\n\t\t\tid: this.id\n\t\t});\n\t}\n\n\ttoArray(): Array<string | undefined> {\n\t\treturn [this.name, this.rid, this.nr, this.id];\n\t}\n}\n","import stream from 'stream';\nimport sax from 'sax';\n\nimport EXPAT from 'node-expat';\n\nlet expat: typeof EXPAT;\n\nfunction lowerFudge(obj: any): any {\n\tconst result: any = {};\n\tObject.keys(obj).forEach(key => {\n\t\tresult[key.toLowerCase()] = obj[key];\n\t});\n\treturn result;\n}\n\nexport interface ISaxParser {\n\tonStartElement(notify: (name: string, attributes: { [key: string]: string | undefined }) => void): ISaxParser;\n\n\tonEndElement(notify: (name: string) => void): ISaxParser;\n\n\tonText(notify: (txt: string) => void): ISaxParser;\n\n\tonClose(notify: (err?: Error) => void): ISaxParser;\n\n\tpiper(): stream.Duplex;\n}\n\nexport class SaxSax implements ISaxParser {\n\tparser = sax.createStream(false, {lowercase: true});\n\n\tconstructor() {\n\n\t}\n\n\tonStartElement(notify: (name: string, attributes: { [key: string]: string | undefined }) => void): ISaxParser {\n\t\tthis.parser.on('opentag', (node: any) => {\n\t\t\tnotify(node.name.toLowerCase(), lowerFudge(node.attributes));\n\t\t});\n\t\treturn this;\n\t}\n\n\tonEndElement(notify: (name: string) => void): ISaxParser {\n\t\tthis.parser.on('closetag', (name) => {\n\t\t\tnotify(name.toLowerCase());\n\t\t});\n\t\treturn this;\n\t}\n\n\tonText(notify: (txt: string) => void): ISaxParser {\n\t\tthis.parser.on('text', notify);\n\t\treturn this;\n\t}\n\n\tonClose(notify: (err?: Error) => void): ISaxParser {\n\t\tlet reported = false;\n\t\tthis.parser.on('error', (err: Error) => {\n\t\t\tif (!reported) {\n\t\t\t\treported = true;\n\t\t\t\tnotify(err);\n\t\t\t}\n\t\t\t(<any>this.parser).error = null;\n\t\t\tthis.parser.resume();\n\t\t});\n\t\tthis.parser.on('end', () => {\n\t\t\tif (!reported) {\n\t\t\t\tnotify();\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\tpiper(): stream.Duplex {\n\t\treturn this.parser;\n\t}\n}\n\nexport class SaxExpat implements ISaxParser {\n\tparser: any;\n\n\tconstructor() {\n\t\tif (!expat) {\n\t\t\ttry {\n\t\t\t\texpat = require('node-expat');\n\t\t\t} catch (e) {\n\t\t\t\tthrow new Error('To use {parser:\"expat\"} you need to install it manually with \"npm install node-expat\"');\n\t\t\t}\n\t\t}\n\t\tthis.parser = expat.createParser();\n\t}\n\n\tonStartElement(notify: (name: string, attributes: { [key: string]: string | undefined }) => void): ISaxParser {\n\t\tthis.parser.on('startElement', (name: string, attributes: any) => {\n\t\t\tnotify(name.toLowerCase(), lowerFudge(attributes));\n\t\t});\n\t\treturn this;\n\t}\n\n\tonEndElement(notify: (name: string) => void): ISaxParser {\n\t\tthis.parser.on('endElement', (name: string) => {\n\t\t\tnotify(name.toLowerCase());\n\t\t});\n\t\treturn this;\n\t}\n\n\tonText(notify: (txt: string) => void): ISaxParser {\n\t\tthis.parser.on('text', notify);\n\t\treturn this;\n\t}\n\n\tonClose(notify: (err?: Error) => void): ISaxParser {\n\t\tlet reported = false;\n\t\tthis.parser.on('error', (err: Error) => {\n\t\t\treported = true;\n\t\t\tnotify(err);\n\t\t});\n\t\tthis.parser.on('close', () => {\n\t\t\tif (!reported) {\n\t\t\t\tnotify();\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\tpiper(): stream.Duplex {\n\t\treturn this.parser;\n\t}\n}\n","module.exports = require(\"sax\");","module.exports = require(\"node-expat\");","import os from 'os';\nimport {IXLSXExtractOptions} from './types';\n\nexport function applyDefaults(options: IXLSXExtractOptions | undefined) {\n\tconst defaults = {\n\t\tsheet_nr: '1',\n\t\tignore_header: 0,\n\t\tdate1904: false,\n\t\tinclude_empty_rows: false,\n\t\ttsv_float_comma: false,\n\t\ttsv_delimiter: '\\t',\n\t\ttsv_endofline: os.EOL,\n\t\tparser: 'sax',\n\t\tformat: 'array',\n\t\tworkfolder: 'xl',\n\t\traw_values: false,\n\t\tround_floats: true,\n\t\tconvert_values: {\n\t\t\tints: true,\n\t\t\tfloats: true,\n\t\t\tdates: true,\n\t\t\tbools: true\n\t\t}\n\t};\n\treturn Object.assign(defaults, options);\n}\n","module.exports = require(\"os\");","import stream from 'stream';\nimport yauzl from 'yauzl';\n/*\nimport unzip from 'unzip2';\n*/\nexport interface IUnzipEntry {\n\tpath: string;\n\n\tpipe(piper: stream.Duplex): void;\n\n\tignore(): void;\n}\n\nexport interface IUnzip {\n\tread(filename: string, onEntry: (entry: IUnzipEntry) => void, onError: (err: Error) => void, onClose: () => void): void;\n}\n/*\nexport class Unzip2UnzipEntry implements IUnzipEntry {\n\tpath: string;\n\n\tconstructor(private entry: unzip.ZipEntry) {\n\t\tthis.path = entry.path;\n\t}\n\n\tpublic pipe(piper: stream.Duplex): void {\n\t\tthis.entry.pipe(piper);\n\t}\n\n\tpublic ignore(): void {\n\t\tthis.entry.autodrain();\n\t}\n}\nexport class Unzip2Unzip implements IUnzip {\n\n\tpublic read(filename: string, onEntry: (entry: IUnzipEntry) => void, onError: (err: Error) => void, onClose: () => void): void {\n\t\tfs.createReadStream(filename)\n\t\t\t.pipe(unzip.Parse())\n\t\t\t.on('error', (err: Error) => {\n\t\t\t\tonError(err);\n\t\t\t})\n\t\t\t.on('entry', (entry: unzip.ZipEntry) => {\n\t\t\t\tconst wrapper = new Unzip2UnzipEntry(entry);\n\t\t\t\tonEntry(wrapper);\n\t\t\t})\n\t\t\t.on('close', () => {\n\t\t\t\tonClose();\n\t\t\t});\n\t}\n\n}\n*/\nexport class YauzlUnzipEntry implements IUnzipEntry {\n\tpath: string;\n\n\tconstructor(private entry: yauzl.Entry, private zipfile: yauzl.ZipFile) {\n\t\tthis.path = entry.fileName;\n\t}\n\n\tpublic pipe(piper: stream.Duplex): void {\n\t\tthis.zipfile.openReadStream(this.entry, (err, readStream) => {\n\t\t\tif (err) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tif (!readStream) {\n\t\t\t\tthrow new Error('No data for zip file entry');\n\t\t\t}\n\t\t\treadStream.on('end', () => {\n\t\t\t\tthis.zipfile.readEntry();\n\t\t\t});\n\t\t\treadStream.pipe(piper);\n\t\t});\n\t}\n\n\tpublic ignore(): void {\n\t\tthis.zipfile.readEntry();\n\t}\n\n}\n\nexport class YauzlUnzip implements IUnzip {\n\n\tpublic read(filename: string, onEntry: (entry: IUnzipEntry) => void, onError: (err: Error) => void, onClose: () => void): void {\n\t\tyauzl.open(filename, {lazyEntries: true, autoClose: true}, (err, zipfile) => {\n\t\t\tif (err) {\n\t\t\t\treturn onError(err);\n\t\t\t}\n\t\t\tif (!zipfile) {\n\t\t\t\treturn onError(new Error('No zip data found in file'));\n\t\t\t}\n\t\t\tzipfile.on('error', (err2) => {\n\t\t\t\tonError(err2);\n\t\t\t});\n\t\t\tzipfile.on('entry', (entry) => {\n\t\t\t\tif (/\\/$/.test(entry.fileName)) {\n\t\t\t\t\t// Directory file names end with '/'.\n\t\t\t\t\t// Note that entries for directories themselves are optional.\n\t\t\t\t\t// An entry's fileName implicitly requires its parent directories to exist.\n\t\t\t\t\tzipfile.readEntry();\n\t\t\t\t} else {\n\t\t\t\t\tconst wrapper = new YauzlUnzipEntry(entry, zipfile);\n\t\t\t\t\tonEntry(wrapper);\n\t\t\t\t}\n\t\t\t});\n\t\t\tzipfile.once('end', () => {\n\t\t\t\tonClose();\n\t\t\t});\n\t\t\tzipfile.readEntry();\n\t\t});\n\t}\n\n}\n\n","module.exports = require(\"yauzl\");"],"sourceRoot":""}