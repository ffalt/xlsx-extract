{"version":3,"sources":["webpack://library/webpack/universalModuleDefinition","webpack://library/webpack/bootstrap","webpack://library/./src/utils.ts","webpack://library/./src/index.ts","webpack://library/external \"events\"","webpack://library/external \"fs\"","webpack://library/external \"path\"","webpack://library/external \"util\"","webpack://library/./src/reader.ts","webpack://library/./src/book.ts","webpack://library/./src/row.ts","webpack://library/./src/cell.ts","webpack://library/./src/sheet.ts","webpack://library/./src/xml.ts","webpack://library/external \"sax\"","webpack://library/external \"node-expat\"","webpack://library/./src/defaults.ts","webpack://library/external \"os\"","webpack://library/./src/unzip.ts","webpack://library/external \"yauzl\""],"names":["root","factory","exports","module","define","amd","global","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","xlsx_date","date1904","ignore_timezone","date","Math","floor","time","round","Date","setDate","getDate","setSeconds","setMinutes","getTimezoneOffset","setHours","xlsx_fmts","0","1","2","3","4","9","10","11","12","13","14","15","16","17","18","19","20","21","22","37","38","39","40","45","46","47","48","49","Alphabet","alphaNum","result","multiplier","length","charCodeAt","containsOnlyChars","chars","indexOf","parseFmtType","fmt","b","slice","sp","replace","split","trim","isNaN","parseInt","di","f","numAlpha","charAt","splitCellFormats","fmts","last","ff","push","fmt_type","digits","getColumnFromDef","colDef","cc","isValidDate","getTime","escapeTSV","val","options","delimiter","tsv_delimiter","unescapexml","text","encodings","&quot;","&apos;","&gt;","&lt;","&amp;","$$","$1","String","fromCharCode","j","events","__importStar","fs","path","util","reader_1","XLSX","_super","_this","this","inherits","EventEmitter","__extends","extract","filename","XLSXReader","read","what","data","emit","convert","destfile","format","extname","toLowerCase","writeable","start","isJSON","createWriteStream","write","e","on","tsv_endofline","end","require","utils_1","book_1","row_1","cell_1","sheet_1","xml_1","defaults_1","unzip_1","applyDefaults","workfolder","createParser","parser","SaxExpat","SaxSax","createUnzip","YauzlUnzip","parseXMLSheet","entry","workbook","cb","row","cell","addvalue","addformular","rownum","sax","onStartElement","attrs","include_empty_rows","rownr","Row","Cell","typ","styles","undefined","address","col","count","empty","onEndElement","cells","sharedStrings","raw","raw_values","convertValue","onText","txt","formula","onClose","pipe","piper","parseXMLWorkbookSheets","sheets","sheet","Sheet","rid","id","sheetid","nr","toString","err","parseXMLWorkbookRelations","relations","target","parseXMLStyles","formatstyles","numFmts","cellXfs","cellXfs_collect","numfmtid","formatcode","fmtnr","stylenr","def","parseXMLStrings","strings","collect_strings","sl","join","getLookups","sheet_all","forEach","rel","find","sheet_name","getByName","sheet_rid","getByRId","sheet_id","getById","sheet_nr","getByNr","sheetId_1","parseSheets","running","finish","lookups","lookup","row_count_1","row_start_1","ignore_header","ignore","parseWorkbook","Workbook","collecting","checkStartParseSheet","part","getFormat","toJson","toArray","toTSV","map","JSON","stringify","isEmpty","filter","toISOString","tsv_float_comma","getEffectiveNumFormat","applyNumFormat","convert_values","dates","ints","parseFloat","floats","round_floats","toFixed","v","bools","expat","sax_1","__importDefault","lowerFudge","obj","keys","default","createStream","lowercase","notify","node","attributes","reported","error","resume","Error","os_1","defaults","EOL","assign","yauzl_1","YauzlUnzipEntry","zipfile","fileName","openReadStream","readStream","readEntry","onEntry","onError","open","lazyEntries","autoClose","err2","test","wrapper","once"],"mappings":"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","file":"index.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"library\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"library\"] = factory();\n\telse\n\t\troot[\"library\"] = factory();\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","import {ICellFormat} from './cell';\nimport {IXLSXExtractOptions} from './types';\n\n/**\n converts a raw xlsx-date to js date\n */\nexport function xlsx_date(value: number, date1904: boolean, ignore_timezone: boolean): Date {\n\tlet date = Math.floor(value),\n\t\ttime = Math.round(86400 * (value - date)),\n\t\td;\n\tif (date1904) {\n\t\tdate += 1462;\n\t}\n\t// Open XML stores dates as the number of days from 1 Jan 1900. Well, skipping the incorrect 29 Feb 1900 as a valid day.\n\tif (date === 60) {\n\t\td = new Date(1900, 1, 29);\n\t} else {\n\t\tif (date > 60) {\n\t\t\t--date;\n\t\t}\n\t\t/* 1 = Jan 1 1900 */\n\t\td = new Date(1900, 0, 1, 0, 0, 0);\n\t\td.setDate(d.getDate() + date - 1);\n\t}\n\td.setSeconds(time % 60);\n\ttime = Math.floor(time / 60);\n\td.setMinutes(time % 60);\n\ttime = Math.floor(time / 60);\n\tif (!ignore_timezone) {\n\t\ttime -= d.getTimezoneOffset() / 60;\n\t}\n\td.setHours(time);\n\treturn d;\n}\n\n/**\n xlsx build in nr formats\n */\nexport const xlsx_fmts: { [id: number]: string | null } = {\n\t0: null, // General\n\t1: '0',\n\t2: '0.00',\n\t3: '#,##0',\n\t4: '#,##0.00',\n\n\t9: '0%',\n\t10: '0.00%',\n\t11: '0.00E+00',\n\t12: '# ?/?',\n\t13: '# ??/??',\n\t14: 'mm-dd-yy',\n\t15: 'd-mmm-yy',\n\t16: 'd-mmm',\n\t17: 'mmm-yy',\n\t18: 'h:mm AM/PM',\n\t19: 'h:mm:ss AM/PM',\n\t20: 'h:mm',\n\t21: 'h:mm:ss',\n\t22: 'm/d/yy h:mm',\n\n\t37: '#,##0 ;(#,##0)',\n\t38: '#,##0 ;[Red](#,##0)',\n\t39: '#,##0.00;(#,##0.00)',\n\t40: '#,##0.00;[Red](#,##0.00)',\n\n\t45: 'mm:ss',\n\t46: '[h]:mm:ss',\n\t47: 'mmss.0',\n\t48: '##0.0E+0',\n\t49: '@'\n};\n\nconst Alphabet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\n/**\n converts a column index to chars e.g. 1 -> A\n */\nexport function numAlpha(i: number): string {\n\tconst t = Math.floor(i / 26) - 1;\n\treturn (t > -1 ? numAlpha(t) : '') + Alphabet.charAt(i % 26);\n}\n\n/**\n converts a chars to column index e.g. A -> 1\n */\nexport function alphaNum(name: string) {\n\tlet result = 0;\n\tlet multiplier = 1;\n\tfor (let i = name.length - 1; i >= 0; i--) {\n\t\tconst value = ((name[i].charCodeAt(0) - 'A'.charCodeAt(0)) + 1);\n\t\tresult = result + value * multiplier;\n\t\tmultiplier = multiplier * 26;\n\t}\n\treturn (result - 1);\n}\n\n/**\n split and parse cell formats\n */\nexport function containsOnlyChars(value: string, chars: string): boolean {\n\tfor (let i = 0; i < value.length; i++) {\n\t\tif (chars.indexOf(value[i]) < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn (value.length > 0);\n}\n\n/**\n splits and parse cell formats\n */\nexport function splitCellFormats(s: string): Array<ICellFormat> {\n\t/*\n\t http://office.microsoft.com/en-gb/excel-help/create-or-delete-a-custom-number-format-HP005199500.aspx?redir=0\n\t _-* #,##0\\ _€_-;\\-* #,##0\\ _€_-;_-* \"-\"??\\ _€_-;_-@_-\n\t positive value ; negative value ; zero; string\n\t */\n\tconst fmts = s.split(/(?!\\\\);/);\n\tlet nr = 0;\n\tlet last = {t: 'x'};\n\tconst result: Array<ICellFormat> = [];\n\tfor (let i = 0; i < fmts.length; i++) {\n\t\tlet ff = parseFmtType(fmts[i]);\n\t\tff = (ff.t === 'l' ? last : ff);\n\t\tlast = ff;\n\t\tresult.push({fmt: fmts[i], fmt_type: ff.t, digits: ff.f});\n\t\tnr++;\n\t}\n\treturn result;\n}\n\n/**\n parse cell format\n */\nfunction parseFmtType(fmt: string): { t: string, f?: number } {\n\t// messy hack for extracting some info from the number format (type and float-digits}\n\tlet s = fmt;\n\tlet b = '';\n\twhile (s.length > 0) {\n\t\tconst c = s[0];\n\t\ts = s.slice(1);\n\t\tif ((c === '_') || (c === '\\\\') || (c === '*')) {\n\t\t\ts = s.slice(1);\n\t\t} else if (c === '[') {\n\t\t\ts = s.slice(s.indexOf(']') + 1);\n\t\t} else if (c === '\"') {\n\t\t\ts = s.slice(s.indexOf('\"') + 1);\n\t\t} else if ((c === '(') || (c === ')')) {\n\t\t\t// nop\n\t\t} else {\n\t\t\tb += c;\n\t\t}\n\t}\n\tb = b.replace(/#/g, '0').replace(/%/g, '');\n\t// deal with thousands separator 12000 -> 12 -> formatCode\t'#,'\n\tlet sp = b.split(',');\n\tb = sp[sp.length - 1];\n\tif (b === '' || (b.trim().indexOf(' ') < 0) && !isNaN(parseInt(b, 10))) {\n\t\tif (b.indexOf('.') >= 0) {\n\t\t\tlet di = sp[sp.length - 1].split('.')[1].trim().length;\n\t\t\tif (b.indexOf('E+') >= 0) {\n\t\t\t\tdi += 14;\n\t\t\t}\n\t\t\treturn {t: 'f', f: di};\n\t\t} else {\n\t\t\treturn {t: 'i'};\n\t\t}\n\t} else if (b === '@') {\n\t\treturn {t: 's'};\n\t}\n\t// '-'?? zero value\n\tif (b === '??') {\n\t\treturn {t: 'l'}; // last fmt should by used\n\t}\n\tsp = b.split(' ');\n\t// test '# ??/??'\n\tif ((sp.length > 1) && (containsOnlyChars(sp[sp.length - 1], '?/'))) {\n\t\t// '# ?/?' or '# ??/??',\n\t\tconst digits = sp[sp.length - 1].split('/')[0].trim().length + 1;\n\t\treturn {t: 'f', f: digits};\n\t}\n\t// date format?\n\tif (containsOnlyChars(b, 'tmdyhseAPTMH:/-.0 ')) {\n\t\treturn {t: 'd'};\n\t}\n\treturn {t: 'x'};\n}\n\n/*\n A1 -> 0\n A2 -> 0\n B2 -> 1\n */\nexport function getColumnFromDef(colDef: string): number {\n\tlet cc = '';\n\tfor (let i = 0; i < colDef.length; i++) {\n\t\tif (isNaN(parseInt(colDef[i], 10))) {\n\t\t\tcc += colDef[i];\n\t\t} else {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn alphaNum(cc);\n}\n\nexport function isValidDate(d: any): boolean {\n\treturn d instanceof Date && !isNaN(d.getTime());\n}\n\nexport function escapeTSV(val: string, options: IXLSXExtractOptions): string {\n\tconst delimiter = options.tsv_delimiter || '\\t';\n\tif (val && val.indexOf('\"') > -1 || val.indexOf('\\n') > -1 || val.indexOf('\\r') > -1 || val.indexOf(delimiter) > -1) {\n\t\tval = '\"' + val.replace(/\"/g, '\"\"') + '\"';\n\t}\n\treturn val;\n}\n\nexport function unescapexml(text: string): string {\n\tconst encregex = /&(?:quot|apos|gt|lt|amp|#x?([\\da-fA-F]+));/g;\n\tconst coderegex = /_x([\\da-fA-F]{4})_/g;\n\tconst encodings: { [key: string]: string } = {\n\t\t'&quot;': '\"',\n\t\t'&apos;': '\\'',\n\t\t'&gt;': '>',\n\t\t'&lt;': '<',\n\t\t'&amp;': '&'\n\t};\n\tconst s = text + '';\n\tconst i = s.indexOf('<![CDATA[');\n\tif (i === -1) {\n\t\treturn s.replace(encregex, function($$, $1) {\n\t\t\treturn encodings[$$] || String.fromCharCode(parseInt($1, $$.indexOf('x') > -1 ? 16 : 10)) || $$;\n\t\t}).replace(coderegex, function(m, c) {\n\t\t\treturn String.fromCharCode(parseInt(c, 16));\n\t\t});\n\t}\n\tconst j = s.indexOf(']]>');\n\treturn unescapexml(s.slice(0, i)) + s.slice(i + 9, j) + unescapexml(s.slice(j + 3));\n\n}\n","import {IXLSXExtractOptions} from './types';\nimport * as events from 'events';\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as os from 'os';\nimport * as util from 'util';\nimport {XLSXReader} from './reader';\n\nexport class XLSX extends events.EventEmitter {\n\n\tconstructor() {\n\t\tsuper();\n\t\tutil.inherits(XLSX, events.EventEmitter);\n\t\tevents.EventEmitter.call(this);\n\t}\n\n\textract(filename: string, options?: IXLSXExtractOptions): XLSX {\n\t\tconst reader = new XLSXReader(filename, options);\n\t\treader.read((what: string, data: any) => {\n\t\t\tthis.emit(what, data);\n\t\t});\n\t\treturn this;\n\t}\n\n\tconvert(filename: string, destfile: string, options: IXLSXExtractOptions): XLSX {\n\t\toptions = options || {};\n\n\t\tif ((!options.format) && ((path.extname(destfile).toLowerCase() === '.json'))) {\n\t\t\toptions.format = 'json';\n\t\t}\n\t\tif (options.format !== 'json') {\n\t\t\toptions.format = 'tsv';\n\t\t}\n\n\t\tlet start = true;\n\t\tconst isJSON = options.format !== 'tsv';\n\t\tlet writeable: fs.WriteStream;\n\t\ttry {\n\t\t\twriteable = fs.createWriteStream(destfile);\n\t\t\tif (isJSON) {\n\t\t\t\twriteable.write('[');\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tthis.emit('error', e);\n\t\t\tthis.emit('end');\n\t\t\treturn this;\n\t\t}\n\t\twriteable.on('close', () => {\n\t\t\tthis.emit('end');\n\t\t});\n\t\tconst reader = new XLSXReader(filename, options);\n\t\treader.read((what, data) => {\n\t\t\tswitch (what) {\n\t\t\t\tcase 'error':\n\t\t\t\t\tthis.emit('error', data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'cell':\n\t\t\t\t\tthis.emit('cell', data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'row':\n\t\t\t\t\tif (isJSON) {\n\t\t\t\t\t\tif (start) {\n\t\t\t\t\t\t\tstart = false;\n\t\t\t\t\t\t\twriteable.write(options.tsv_endofline);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\twriteable.write(',' + options.tsv_endofline);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.emit('row', data);\n\t\t\t\t\twriteable.write(data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'end':\n\t\t\t\t\tif (isJSON) {\n\t\t\t\t\t\twriteable.write(options.tsv_endofline + ']');\n\t\t\t\t\t}\n\t\t\t\t\twriteable.end();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n}\n","module.exports = require(\"events\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","module.exports = require(\"util\");","import {getColumnFromDef, splitCellFormats, xlsx_fmts} from './utils';\nimport {Workbook} from './book';\nimport {Row} from './row';\nimport {Cell, ICellFormatStyles} from './cell';\nimport {IXLSXExtractOptions} from './types';\nimport {Sheet} from './sheet';\nimport {ISaxParser, SaxExpat, SaxSax} from './xml';\nimport {applyDefaults} from './defaults';\nimport {IUnzip, IUnzipEntry, YauzlUnzip} from './unzip';\n\nexport class XLSXReader {\n\tfilename: string;\n\toptions: IXLSXExtractOptions = {};\n\tworkfolder: string;\n\n\tconstructor(filename: string, options?: IXLSXExtractOptions) {\n\t\tthis.filename = filename;\n\t\tthis.options = applyDefaults(options);\n\t\tthis.workfolder = this.options.workfolder || 'xl';\n\t}\n\n\tprivate createParser(): ISaxParser {\n\t\tif (this.options.parser === 'expat') {\n\t\t\treturn new SaxExpat();\n\t\t}\n\t\treturn new SaxSax();\n\t}\n\n\tprivate createUnzip(): IUnzip {\n\t\treturn new YauzlUnzip();\n\t}\n\n\tprivate parseXMLSheet(entry: IUnzipEntry, workbook: Workbook, emit: (row?: Row | null, cell?: Cell | null) => void, cb: (err?: Error) => void) {\n\t\t/*\n\t\t converts cell value according to the cell type & number format\n\t\t */\n\t\tlet addvalue = false;\n\t\tlet addformular = false;\n\t\tlet row: Row;\n\t\tlet rownum = 1;\n\t\tlet cell: Cell;\n\t\tconst sax = this.createParser()\n\t\t\t.onStartElement((name, attrs) => {\n\t\t\t\tif (name === 'row') {\n\t\t\t\t\tif (this.options.include_empty_rows) {\n\t\t\t\t\t\tconst rownr = parseInt(attrs.r || '', 10);\n\t\t\t\t\t\t// TODO: if rows are not sorted, we are screwed - track and warn user if so\n\t\t\t\t\t\t// reading them first and sort is not wanted, since rows are streamed\n\t\t\t\t\t\twhile (rownum < rownr) {\n\t\t\t\t\t\t\trownum++;\n\t\t\t\t\t\t\temit(new Row());\n\t\t\t\t\t\t}\n\t\t\t\t\t\trownum = rownr + 1;\n\t\t\t\t\t}\n\t\t\t\t\trow = new Row();\n\t\t\t\t} else if (name === 'c') {\n\t\t\t\t\tcell = new Cell();\n\t\t\t\t\tcell.typ = (attrs.t ? attrs.t : 'n');\n\t\t\t\t\tcell.fmt = attrs.s ? workbook.styles[attrs.s] : undefined;\n\t\t\t\t\tcell.address = attrs.r;\n\t\t\t\t\tcell.col = getColumnFromDef(attrs.r || '');\n\t\t\t\t\t// TODO: if cols are not sorted, we are screwed - track and warn user if so\n\t\t\t\t\twhile (row.count() < cell.col) {\n\t\t\t\t\t\tconst empty = new Cell();\n\t\t\t\t\t\tempty.col = row.count();\n\t\t\t\t\t\trow.push(empty);\n\t\t\t\t\t\temit(null, cell);\n\t\t\t\t\t}\n\t\t\t\t\trow.push(cell);\n\t\t\t\t} else if (name === 'v') {\n\t\t\t\t\taddvalue = true;\n\t\t\t\t} else if (name === 't') { // support for inline text <c t=\"inlineStr\"><is><t>Product</t></is></c>\n\t\t\t\t\taddvalue = true;\n\t\t\t\t} else if (name === 'f') {\n\t\t\t\t\taddformular = true;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onEndElement((name) => {\n\t\t\t\tif (name === 'row') {\n\t\t\t\t\tif (row) {\n\t\t\t\t\t\tif (row.cells.length > 0 || this.options.include_empty_rows) {\n\t\t\t\t\t\t\temit(row);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (name === 'v') {\n\t\t\t\t\taddvalue = false;\n\t\t\t\t} else if (name === 't') {\n\t\t\t\t\taddvalue = false;\n\t\t\t\t} else if (name === 'f') {\n\t\t\t\t\taddformular = false;\n\t\t\t\t} else if (name === 'c') {\n\t\t\t\t\taddvalue = false;\n\t\t\t\t\tif (cell.col !== undefined && cell.col >= 0) {\n\t\t\t\t\t\tif (cell.typ === 's') {\n\t\t\t\t\t\t\tcell.val = workbook.sharedStrings[parseInt(cell.val, 10)];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcell.raw = cell.val;\n\t\t\t\t\t\tif (!this.options.raw_values) {\n\t\t\t\t\t\t\tcell.convertValue(this.options);\n\t\t\t\t\t\t}\n\t\t\t\t\t\temit(null, cell);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onText((txt: string) => {\n\t\t\t\tif (addvalue) {\n\t\t\t\t\tcell.val = (cell.val ? cell.val : '') + txt;\n\t\t\t\t}\n\t\t\t\tif (addformular) {\n\t\t\t\t\tcell.formula = (cell.formula ? cell.formula : '') + txt;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onClose(cb);\n\t\tentry.pipe(sax.piper());\n\t}\n\n\tprivate parseXMLWorkbookSheets(entry: IUnzipEntry, cb: (err: Error | undefined, sheets: Array<Sheet>) => void) {\n\t\tconst sheets: Array<Sheet> = [];\n\t\tconst sax = this.createParser()\n\t\t\t.onStartElement((name, attrs) => {\n\t\t\t\tif (name === 'sheet') {\n\t\t\t\t\tconst sheet = new Sheet();\n\t\t\t\t\tsheet.rid = attrs['r:id'] || '';\n\t\t\t\t\tsheet.id = attrs.sheetid;\n\t\t\t\t\tsheet.nr = (sheets.length + 1).toString();\n\t\t\t\t\tsheet.name = attrs.name;\n\t\t\t\t\tsheets.push(sheet);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onClose((err) => {\n\t\t\t\tcb(err, sheets);\n\t\t\t});\n\t\tentry.pipe(sax.piper());\n\t}\n\n\tprivate parseXMLWorkbookRelations(entry: IUnzipEntry, cb: (err: Error | undefined, relations: Array<{ sheetid: string, filename: string }>) => void) {\n\t\tconst relations: Array<{ sheetid: string, filename: string }> = [];\n\t\tconst sax = this.createParser()\n\t\t\t.onStartElement((name, attrs) => {\n\t\t\t\tif (\n\t\t\t\t\t(name === 'relationship') &&\n\t\t\t\t\t(typeof attrs.target === 'string') &&\n\t\t\t\t\t(attrs.target.toLowerCase().indexOf('worksheets/sheet') >= 0) &&\n\t\t\t\t\tattrs.id) {\n\t\t\t\t\trelations.push({sheetid: attrs.id, filename: attrs.target});\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onClose((err) => {\n\t\t\t\tcb(err, relations);\n\t\t\t});\n\t\tentry.pipe(sax.piper());\n\t}\n\n\tprivate parseXMLStyles(entry: IUnzipEntry, cb: (err: Error | undefined, formatstyles: ICellFormatStyles) => void) {\n\t\tconst formatstyles: ICellFormatStyles = {};\n\t\tconst numFmts: { [id: string]: string } = {};\n\t\tconst cellXfs: Array<number> = [];\n\t\tlet cellXfs_collect = false;\n\t\tconst sax = this.createParser()\n\t\t\t.onStartElement((name, attrs) => {\n\t\t\t\tif (name === 'numfmt') {\n\t\t\t\t\tif (attrs.numfmtid && attrs.formatcode) {\n\t\t\t\t\t\tnumFmts[attrs.numfmtid] = attrs.formatcode;\n\t\t\t\t\t}\n\t\t\t\t} else if (name === 'cellxfs') {\n\t\t\t\t\tcellXfs_collect = true;\n\t\t\t\t} else if ((cellXfs_collect) && (name === 'xf')) {\n\t\t\t\t\tconst fmtnr = parseInt(attrs.numfmtid || '', 10);\n\t\t\t\t\tcellXfs.push(fmtnr);\n\t\t\t\t\tconst stylenr = (cellXfs.length - 1).toString();\n\t\t\t\t\tconst fmt = numFmts[fmtnr] || xlsx_fmts[fmtnr];\n\t\t\t\t\tformatstyles[stylenr] = {\n\t\t\t\t\t\tfmt: fmt === null ? undefined : fmt,\n\t\t\t\t\t\tfmtnr: fmtnr,\n\t\t\t\t\t\tfmts: (fmt ? splitCellFormats(fmt) : []),\n\t\t\t\t\t\tdef: attrs\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onEndElement((name: string) => {\n\t\t\t\tif (name === 'cellxfs') {\n\t\t\t\t\tcellXfs_collect = false;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onClose((err) => {\n\t\t\t\tcb(err, formatstyles);\n\t\t\t});\n\t\tentry.pipe(sax.piper());\n\t}\n\n\tprivate parseXMLStrings(entry: IUnzipEntry, cb: (err: Error | undefined, strings: Array<string>) => void) {\n\t\tconst strings: Array<string> = [];\n\t\tlet collect_strings = false;\n\t\tlet sl: Array<string> = [];\n\t\tlet s = '';\n\t\tconst sax = this.createParser()\n\t\t\t.onStartElement((name, attrs) => {\n\t\t\t\tif (name === 'si') {\n\t\t\t\t\tsl = [];\n\t\t\t\t}\n\t\t\t\tif (name === 't') {\n\t\t\t\t\tcollect_strings = true;\n\t\t\t\t\ts = '';\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onEndElement((name) => {\n\t\t\t\tif (name === 't') {\n\t\t\t\t\tsl.push(s);\n\t\t\t\t\tcollect_strings = false;\n\t\t\t\t}\n\t\t\t\tif (name === 'si') {\n\t\t\t\t\tstrings.push(sl.join(''));\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onText((txt) => {\n\t\t\t\tif (collect_strings) {\n\t\t\t\t\ts = s + txt.replace(/\\r\\n/g, '\\n');\n\t\t\t\t}\n\t\t\t})\n\t\t\t.onClose((err) => {\n\t\t\t\tcb(err, strings);\n\t\t\t});\n\t\tentry.pipe(sax.piper());\n\t}\n\n\tprivate getLookups(workbook: Workbook): Array<{ sheet?: Sheet, filename: string }> {\n\t\tconst result: Array<{ sheet?: Sheet, filename: string }> = [];\n\t\tif (this.options.sheet_all) {\n\t\t\tworkbook.sheets.forEach(s => {\n\t\t\t\tconst rel = workbook.relations.find(r => r.sheetid === s.rid);\n\t\t\t\tif (rel) {\n\t\t\t\t\tresult.push({sheet: s, filename: this.workfolder + '/' + rel.filename});\n\t\t\t\t}\n\t\t\t});\n\t\t\treturn result;\n\t\t}\n\t\tlet sheet: Sheet | undefined;\n\t\tif (this.options.sheet_name) {\n\t\t\tsheet = workbook.getByName(this.options.sheet_name);\n\t\t} else if (this.options.sheet_rid) {\n\t\t\tsheet = workbook.getByRId(this.options.sheet_rid.toString());\n\t\t} else if (this.options.sheet_id) {\n\t\t\tconst sheet_id = this.options.sheet_id.toString();\n\t\t\tsheet = workbook.getById(sheet_id);\n\t\t} else {\n\t\t\tconst sheet_nr = this.options.sheet_nr || '1';\n\t\t\tsheet = workbook.getByNr(sheet_nr);\n\t\t\tif (!sheet) {\n\t\t\t\tresult.push({filename: this.workfolder + '/worksheets/sheet' + sheet_nr + '.xml'});\n\t\t\t}\n\t\t}\n\t\tif (sheet) {\n\t\t\tconst sheetId = sheet.rid;\n\t\t\tconst rel = workbook.relations.find(r => r.sheetid === sheetId);\n\t\t\tif (rel) {\n\t\t\t\tresult.push({sheet, filename: this.workfolder + '/' + rel.filename});\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tprivate parseSheets(workbook: Workbook, emit: (part: { err?: Error, cell?: Cell, row?: Row, sheet?: Sheet }) => void) {\n\t\tlet running = 1;\n\n\t\tconst finish = () => {\n\t\t\tif (running === 0) {\n\t\t\t\temit({});\n\t\t\t}\n\t\t};\n\t\tconst lookups = this.getLookups(workbook);\n\t\tconst unzip = this.createUnzip();\n\t\tunzip.read(this.filename,\n\t\t\tentry => {\n\t\t\t\tconst lookup = lookups.find(l => l.filename === entry.path);\n\t\t\t\tif (lookup) {\n\t\t\t\t\trunning++;\n\t\t\t\t\tlet row_count = 1;\n\t\t\t\t\tconst row_start = this.options.ignore_header || 0;\n\t\t\t\t\tif (lookup.sheet) {\n\t\t\t\t\t\temit({sheet: lookup.sheet});\n\t\t\t\t\t}\n\t\t\t\t\tthis.parseXMLSheet(entry, workbook, (row, cell) => {\n\t\t\t\t\t\tif (cell) {\n\t\t\t\t\t\t\tif (row_count > row_start) {\n\t\t\t\t\t\t\t\temit({cell: cell});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (row) {\n\t\t\t\t\t\t\tif (row_count > row_start) {\n\t\t\t\t\t\t\t\temit({row: row});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\trow_count++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}, (err) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\temit({err: err});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\trunning--;\n\t\t\t\t\t\t\tfinish();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tentry.ignore();\n\t\t\t\t}\n\t\t\t},\n\t\t\terr => {\n\t\t\t\temit({err});\n\t\t\t\temit({});\n\t\t\t},\n\t\t\t() => {\n\t\t\t\trunning--;\n\t\t\t\tfinish();\n\t\t\t}\n\t\t);\n\t}\n\n\tprivate parseWorkbook(emit: (part: { err?: Error, cell?: Cell, row?: Row, sheet?: Sheet }) => void) {\n\t\tconst workbook = new Workbook();\n\t\tlet collecting = 1;\n\n\t\tconst checkStartParseSheet = () => {\n\t\t\tcollecting--;\n\t\t\tif (collecting === 0) {\n\t\t\t\tthis.parseSheets(workbook, emit);\n\t\t\t}\n\t\t};\n\n\t\t// first get styles & strings\n\t\t// TODO: is there really no memory friendly way to NOT read zip stream twice for styles/strings/etc and then for sheets?\n\t\tconst unzip = this.createUnzip();\n\t\tunzip.read(this.filename,\n\t\t\tentry => {\n\t\t\t\tif (entry.path === this.workfolder + '/sharedStrings.xml') {\n\t\t\t\t\tcollecting++;\n\t\t\t\t\tthis.parseXMLStrings(entry, (err, strings) => {\n\t\t\t\t\t\tworkbook.sharedStrings = strings;\n\t\t\t\t\t\tcheckStartParseSheet();\n\t\t\t\t\t});\n\t\t\t\t} else if (entry.path === this.workfolder + '/styles.xml') {\n\t\t\t\t\tcollecting++;\n\t\t\t\t\tthis.parseXMLStyles(entry, (err, formatstyles) => {\n\t\t\t\t\t\tworkbook.styles = formatstyles;\n\t\t\t\t\t\tcheckStartParseSheet();\n\t\t\t\t\t});\n\t\t\t\t} else if (entry.path === this.workfolder + '/workbook.xml') {\n\t\t\t\t\tcollecting++;\n\t\t\t\t\tthis.parseXMLWorkbookSheets(entry, (err, sheets) => {\n\t\t\t\t\t\tworkbook.sheets = sheets;\n\t\t\t\t\t\tcheckStartParseSheet();\n\t\t\t\t\t});\n\t\t\t\t} else if (entry.path === this.workfolder + '/_rels/workbook.xml.rels') {\n\t\t\t\t\tcollecting++;\n\t\t\t\t\tthis.parseXMLWorkbookRelations(entry, (err, relations) => {\n\t\t\t\t\t\tworkbook.relations = relations;\n\t\t\t\t\t\tcheckStartParseSheet();\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\tentry.ignore();\n\t\t\t\t}\n\t\t\t},\n\t\t\terr => {\n\t\t\t\temit({err});\n\t\t\t\temit({});\n\t\t\t},\n\t\t\t() => {\n\t\t\t\tcheckStartParseSheet();\n\t\t\t}\n\t\t);\n\t}\n\n\tread(emit: (what: string, data?: any) => void) {\n\t\tthis.parseWorkbook(part => {\n\t\t\tif (part.err) {\n\t\t\t\temit('error', part.err);\n\t\t\t} else if (part.cell) {\n\t\t\t\temit('cell', part.cell.getFormat(this.options));\n\t\t\t} else if (part.row) {\n\t\t\t\temit('row', part.row.getFormat(this.options));\n\t\t\t} else if (part.sheet) {\n\t\t\t\temit('sheet', part.sheet.getFormat(this.options));\n\t\t\t} else {\n\t\t\t\temit('end');\n\t\t\t}\n\t\t});\n\t}\n}\n","import {Sheet} from './sheet';\nimport {ICellFormatStyles} from './cell';\n\nexport class Workbook {\n\tsheets: Array<Sheet> = [];\n\tsharedStrings: Array<string> = [];\n\tstyles: ICellFormatStyles = {};\n\trelations: Array<{ sheetid: string, filename: string }> = [];\n\n\tgetByRId(id: string): Sheet | undefined {\n\t\treturn this.sheets.find(sheet => sheet.rid === id);\n\t}\n\n\tgetById(id: string): Sheet | undefined {\n\t\treturn this.sheets.find(sheet => sheet.id === id);\n\t}\n\n\tgetByNr(nr: string): Sheet | undefined {\n\t\treturn this.sheets.find((sheet) => {\n\t\t\treturn !!sheet.nr && sheet.nr.toString() === nr.toString();\n\t\t});\n\t}\n\n\tgetByName(name: string): Sheet | undefined {\n\t\treturn this.sheets.find(sheet => sheet.name === name);\n\t}\n}\n","import {Cell} from './cell';\nimport {IXLSXExtractOptions} from './types';\n\nexport class Row {\n\tcells: Array<Cell> = [];\n\n\tgetFormat(options: IXLSXExtractOptions) {\n\t\tswitch (options.format) {\n\t\t\tcase 'json':\n\t\t\t\treturn this.toJson();\n\t\t\tcase 'array':\n\t\t\t\treturn this.toArray();\n\t\t\tcase 'obj':\n\t\t\t\treturn this;\n\t\t\t// case 'tsv':\n\t\t\tdefault:\n\t\t\t\treturn this.toTSV(options);\n\t\t}\n\t}\n\n\ttoTSV(options: IXLSXExtractOptions): string {\n\t\treturn this.cells.map(cell => cell.toTSV(options)).join(options.tsv_delimiter || '\\t') + options.tsv_endofline;\n\t}\n\n\ttoJson(): string {\n\t\treturn JSON.stringify(this.toArray());\n\t}\n\n\ttoArray(): Array<string | number | undefined> {\n\t\treturn this.cells.map(cell => cell.val);\n\t}\n\n\tpush(cell: Cell) {\n\t\tthis.cells.push(cell);\n\t}\n\n\tcount(): number {\n\t\treturn this.cells.length;\n\t}\n\n\tisEmpty(): boolean {\n\t\treturn (this.cells.length === 0) || (this.cells.filter(function(cell) {\n\t\t\treturn (cell.val !== null);\n\t\t}).length === 0);\n\t}\n}\n","import {escapeTSV, isValidDate, unescapexml, xlsx_date} from './utils';\nimport {IXLSXExtractOptions} from './types';\n\nexport interface ICellFormat {\n\tfmt: string;\n\tfmt_type: string;\n\tdigits?: number;\n}\n\nexport interface ICellFormatStyle {\n\tfmt?: string;\n\tfmtnr?: number;\n\tfmts: Array<ICellFormat>;\n\tdef?: { [key: string]: string | undefined };\n}\n\nexport interface ICellFormatStyles {\n\t[id: string]: ICellFormatStyle;\n}\n\nexport class Cell {\n\tval: any;\n\tcol?: number;\n\taddress?: string;\n\ttyp?: string;\n\tfmt?: ICellFormatStyle;\n\tformula?: string;\n\traw?: string;\n\n\tgetFormat(options: IXLSXExtractOptions) {\n\t\tswitch (options.format) {\n\t\t\tcase 'json':\n\t\t\t\treturn this.toJson();\n\t\t\tcase 'array':\n\t\t\t\treturn this.val;\n\t\t\tcase 'obj':\n\t\t\t\treturn this;\n\t\t\t// case 'tsv':\n\t\t\tdefault:\n\t\t\t\treturn this.toTSV(options);\n\t\t}\n\t}\n\n\ttoTSV(options: IXLSXExtractOptions): string | undefined {\n\t\tlet val: string;\n\t\tif (this.val === null || this.val === undefined || this.raw === undefined) {\n\t\t\tval = '';\n\t\t} else if (isValidDate(this.val)) {\n\t\t\tval = this.val.toISOString();\n\t\t} else {\n\t\t\tval = this.val.toString();\n\t\t}\n\t\tif (options.tsv_float_comma && (typeof this.val === 'number')) {\n\t\t\tval = val.replace('.', ',');\n\t\t}\n\t\treturn escapeTSV(val, options);\n\t}\n\n\ttoJson() {\n\t\treturn JSON.stringify(this.val);\n\t}\n\n\tgetEffectiveNumFormat(): ICellFormat | null {\n\t\tif ((!this.fmt) || (this.fmt.fmts.length === 0)) {\n\t\t\treturn null;\n\t\t}\n\t\tif (this.fmt.fmts.length === 1) {\n\t\t\treturn this.fmt.fmts[0];\n\t\t}\n\t\tif (isNaN(this.val)) {\n\t\t\treturn this.fmt.fmts[3];\n\t\t}\n\t\tif (this.val < 0) {\n\t\t\treturn this.fmt.fmts[1];\n\t\t}\n\t\tif (this.val > 0) {\n\t\t\treturn this.fmt.fmts[0];\n\t\t}\n\t\treturn this.fmt.fmts[(this.fmt.fmts.length > 2) ? 2 : 0];\n\t}\n\n\tapplyNumFormat(options: IXLSXExtractOptions) {\n\t\tconst format = this.getEffectiveNumFormat();\n\t\tif (format && options.convert_values) {\n\t\t\tswitch (format.fmt_type) {\n\t\t\t\tcase 'd':\n\t\t\t\t\tif (options.convert_values.dates) {\n\t\t\t\t\t\tthis.val = xlsx_date(this.val, !!options.date1904, !!options.ignore_timezone);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'i':\n\t\t\t\t\tif (options.convert_values.ints) {\n\t\t\t\t\t\tlet i = null;\n\t\t\t\t\t\tif (this.fmt && (this.fmt.fmt === '0\\\\ %' || this.fmt.fmt === '0%')) {\n\t\t\t\t\t\t\ti = Math.round(parseFloat(this.val) * 100);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\ti = parseInt(this.val, 10);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!isNaN(i)) {\n\t\t\t\t\t\t\tthis.val = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'f':\n\t\t\t\t\tif ((format.digits !== undefined) && (format.digits > 0) && options.convert_values.floats) {\n\t\t\t\t\t\tif (options.round_floats && !isNaN(this.val)) {\n\t\t\t\t\t\t\tthis.val = this.val.toFixed(format.digits);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst v = parseFloat(this.val);\n\t\t\t\t\t\tif (!isNaN(v)) {\n\t\t\t\t\t\t\tthis.val = v;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// nop\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tconvertValue(options: IXLSXExtractOptions) {\n\t\tif (this.val !== null) {\n\t\t\tswitch (this.typ) {\n\t\t\t\tcase 'n':\n\t\t\t\t\tconst v = parseFloat(this.val);\n\t\t\t\t\tif (!isNaN(v)) {\n\t\t\t\t\t\tthis.val = v;\n\t\t\t\t\t}\n\t\t\t\t\tif ((this.fmt) && (options.convert_values)) {\n\t\t\t\t\t\tthis.applyNumFormat(options);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'str':\n\t\t\t\t\tif (this.raw) {\n\t\t\t\t\t\tthis.val = unescapexml(this.raw);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 's':\n\t\t\t\tcase 'inlineStr':\n\t\t\t\t\tbreak; // string, do nothing\n\t\t\t\tcase 'b':\n\t\t\t\t\tif (options.convert_values && options.convert_values.bools) {\n\t\t\t\t\t\tif (['0', 'FALSE', 'false'].indexOf(this.val) >= 0) {\n\t\t\t\t\t\t\tthis.val = false;\n\t\t\t\t\t\t} else if (['1', 'TRUE', 'true'].indexOf(this.val) >= 0) {\n\t\t\t\t\t\t\tthis.val = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t// case 'e':\n\t\t\t\t// debug('Error cell type: Value will be invalid (\"#REF!\", \"#NAME?\", \"#VALUE!\" or similar).');\n\t\t\t\t// break;\n\t\t\t\tdefault:\n\t\t\t\t// debug('Unknown cell type: \"%s\"', this.typ);\n\t\t\t}\n\t\t}\n\t}\n}\n","import {IXLSXExtractOptions} from './types';\n\nexport class Sheet {\n\tnr?: string;\n\tid?: string;\n\trid?: string;\n\tname?: string;\n\n\tgetFormat(options: IXLSXExtractOptions): any {\n\t\tswitch (options.format) {\n\t\t\tcase 'json':\n\t\t\t\treturn this.toJson();\n\t\t\tcase 'array':\n\t\t\t\treturn this.toArray();\n\t\t\tcase 'obj':\n\t\t\t\treturn this;\n\t\t\t// case 'tsv':\n\t\t\tdefault:\n\t\t\t\treturn this.toTSV(options);\n\t\t}\n\t}\n\n\ttoTSV(options: IXLSXExtractOptions): string {\n\t\treturn this.toArray().join(options.tsv_delimiter || '\\t') + options.tsv_endofline;\n\t}\n\n\ttoJson(): string {\n\t\treturn JSON.stringify({\n\t\t\tname: this.name,\n\t\t\tnr: this.nr,\n\t\t\trid: this.rid,\n\t\t\tid: this.id\n\t\t});\n\t}\n\n\ttoArray(): Array<string | undefined> {\n\t\treturn [this.name, this.rid, this.nr, this.id];\n\t}\n}\n","import stream from 'stream';\nimport sax from 'sax';\n\nimport EXPAT from 'node-expat';\n\nlet expat: typeof EXPAT;\n\nfunction lowerFudge(obj: any): any {\n\tconst result: any = {};\n\tObject.keys(obj).forEach(key => {\n\t\tresult[key.toLowerCase()] = obj[key];\n\t});\n\treturn result;\n}\n\nexport interface ISaxParser {\n\tonStartElement(notify: (name: string, attributes: { [key: string]: string | undefined }) => void): ISaxParser;\n\n\tonEndElement(notify: (name: string) => void): ISaxParser;\n\n\tonText(notify: (txt: string) => void): ISaxParser;\n\n\tonClose(notify: (err?: Error) => void): ISaxParser;\n\n\tpiper(): stream.Duplex;\n}\n\nexport class SaxSax implements ISaxParser {\n\tparser = sax.createStream(false, {lowercase: true});\n\n\tconstructor() {\n\n\t}\n\n\tonStartElement(notify: (name: string, attributes: { [key: string]: string | undefined }) => void): ISaxParser {\n\t\tthis.parser.on('opentag', (node: any) => {\n\t\t\tnotify(node.name.toLowerCase(), lowerFudge(node.attributes));\n\t\t});\n\t\treturn this;\n\t}\n\n\tonEndElement(notify: (name: string) => void): ISaxParser {\n\t\tthis.parser.on('closetag', (name) => {\n\t\t\tnotify(name.toLowerCase());\n\t\t});\n\t\treturn this;\n\t}\n\n\tonText(notify: (txt: string) => void): ISaxParser {\n\t\tthis.parser.on('text', notify);\n\t\treturn this;\n\t}\n\n\tonClose(notify: (err?: Error) => void): ISaxParser {\n\t\tlet reported = false;\n\t\tthis.parser.on('error', (err: Error) => {\n\t\t\tif (!reported) {\n\t\t\t\treported = true;\n\t\t\t\tnotify(err);\n\t\t\t}\n\t\t\t(<any>this.parser).error = null;\n\t\t\tthis.parser.resume();\n\t\t});\n\t\tthis.parser.on('end', () => {\n\t\t\tif (!reported) {\n\t\t\t\tnotify();\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\tpiper(): stream.Duplex {\n\t\treturn this.parser;\n\t}\n}\n\nexport class SaxExpat implements ISaxParser {\n\tparser: any;\n\n\tconstructor() {\n\t\tif (!expat) {\n\t\t\ttry {\n\t\t\t\texpat = require('node-expat');\n\t\t\t} catch (e) {\n\t\t\t\tthrow new Error('To use {parser:\"expat\"} you need to install it manually with \"npm install node-expat\"');\n\t\t\t}\n\t\t}\n\t\tthis.parser = expat.createParser();\n\t}\n\n\tonStartElement(notify: (name: string, attributes: { [key: string]: string | undefined }) => void): ISaxParser {\n\t\tthis.parser.on('startElement', (name: string, attributes: any) => {\n\t\t\tnotify(name.toLowerCase(), lowerFudge(attributes));\n\t\t});\n\t\treturn this;\n\t}\n\n\tonEndElement(notify: (name: string) => void): ISaxParser {\n\t\tthis.parser.on('endElement', (name: string) => {\n\t\t\tnotify(name.toLowerCase());\n\t\t});\n\t\treturn this;\n\t}\n\n\tonText(notify: (txt: string) => void): ISaxParser {\n\t\tthis.parser.on('text', notify);\n\t\treturn this;\n\t}\n\n\tonClose(notify: (err?: Error) => void): ISaxParser {\n\t\tlet reported = false;\n\t\tthis.parser.on('error', (err: Error) => {\n\t\t\treported = true;\n\t\t\tnotify(err);\n\t\t});\n\t\tthis.parser.on('close', () => {\n\t\t\tif (!reported) {\n\t\t\t\tnotify();\n\t\t\t}\n\t\t});\n\t\treturn this;\n\t}\n\n\tpiper(): stream.Duplex {\n\t\treturn this.parser;\n\t}\n}\n","module.exports = require(\"sax\");","module.exports = require(\"node-expat\");","import os from 'os';\nimport {IXLSXExtractOptions} from './types';\n\nexport function applyDefaults(options: IXLSXExtractOptions | undefined) {\n\tconst defaults = {\n\t\tsheet_nr: '1',\n\t\tignore_header: 0,\n\t\tdate1904: false,\n\t\tinclude_empty_rows: false,\n\t\ttsv_float_comma: false,\n\t\ttsv_delimiter: '\\t',\n\t\ttsv_endofline: os.EOL,\n\t\tparser: 'sax',\n\t\tformat: 'array',\n\t\tworkfolder: 'xl',\n\t\traw_values: false,\n\t\tround_floats: true,\n\t\tconvert_values: {\n\t\t\tints: true,\n\t\t\tfloats: true,\n\t\t\tdates: true,\n\t\t\tbools: true\n\t\t}\n\t};\n\treturn Object.assign(defaults, options);\n}\n","module.exports = require(\"os\");","import stream from 'stream';\nimport yauzl from 'yauzl';\n/*\nimport unzip from 'unzip2';\n*/\nexport interface IUnzipEntry {\n\tpath: string;\n\n\tpipe(piper: stream.Duplex): void;\n\n\tignore(): void;\n}\n\nexport interface IUnzip {\n\tread(filename: string, onEntry: (entry: IUnzipEntry) => void, onError: (err: Error) => void, onClose: () => void): void;\n}\n/*\nexport class Unzip2UnzipEntry implements IUnzipEntry {\n\tpath: string;\n\n\tconstructor(private entry: unzip.ZipEntry) {\n\t\tthis.path = entry.path;\n\t}\n\n\tpublic pipe(piper: stream.Duplex): void {\n\t\tthis.entry.pipe(piper);\n\t}\n\n\tpublic ignore(): void {\n\t\tthis.entry.autodrain();\n\t}\n}\nexport class Unzip2Unzip implements IUnzip {\n\n\tpublic read(filename: string, onEntry: (entry: IUnzipEntry) => void, onError: (err: Error) => void, onClose: () => void): void {\n\t\tfs.createReadStream(filename)\n\t\t\t.pipe(unzip.Parse())\n\t\t\t.on('error', (err: Error) => {\n\t\t\t\tonError(err);\n\t\t\t})\n\t\t\t.on('entry', (entry: unzip.ZipEntry) => {\n\t\t\t\tconst wrapper = new Unzip2UnzipEntry(entry);\n\t\t\t\tonEntry(wrapper);\n\t\t\t})\n\t\t\t.on('close', () => {\n\t\t\t\tonClose();\n\t\t\t});\n\t}\n\n}\n*/\nexport class YauzlUnzipEntry implements IUnzipEntry {\n\tpath: string;\n\n\tconstructor(private entry: yauzl.Entry, private zipfile: yauzl.ZipFile) {\n\t\tthis.path = entry.fileName;\n\t}\n\n\tpublic pipe(piper: stream.Duplex): void {\n\t\tthis.zipfile.openReadStream(this.entry, (err, readStream) => {\n\t\t\tif (err) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t\tif (!readStream) {\n\t\t\t\tthrow new Error('No data for zip file entry');\n\t\t\t}\n\t\t\treadStream.on('end', () => {\n\t\t\t\tthis.zipfile.readEntry();\n\t\t\t});\n\t\t\treadStream.pipe(piper);\n\t\t});\n\t}\n\n\tpublic ignore(): void {\n\t\tthis.zipfile.readEntry();\n\t}\n\n}\n\nexport class YauzlUnzip implements IUnzip {\n\n\tpublic read(filename: string, onEntry: (entry: IUnzipEntry) => void, onError: (err: Error) => void, onClose: () => void): void {\n\t\tyauzl.open(filename, {lazyEntries: true, autoClose: true}, (err, zipfile) => {\n\t\t\tif (err) {\n\t\t\t\treturn onError(err);\n\t\t\t}\n\t\t\tif (!zipfile) {\n\t\t\t\treturn onError(new Error('No zip data found in file'));\n\t\t\t}\n\t\t\tzipfile.on('error', (err2) => {\n\t\t\t\tonError(err2);\n\t\t\t});\n\t\t\tzipfile.on('entry', (entry) => {\n\t\t\t\tif (/\\/$/.test(entry.fileName)) {\n\t\t\t\t\t// Directory file names end with '/'.\n\t\t\t\t\t// Note that entries for directories themselves are optional.\n\t\t\t\t\t// An entry's fileName implicitly requires its parent directories to exist.\n\t\t\t\t\tzipfile.readEntry();\n\t\t\t\t} else {\n\t\t\t\t\tconst wrapper = new YauzlUnzipEntry(entry, zipfile);\n\t\t\t\t\tonEntry(wrapper);\n\t\t\t\t}\n\t\t\t});\n\t\t\tzipfile.once('end', () => {\n\t\t\t\tonClose();\n\t\t\t});\n\t\t\tzipfile.readEntry();\n\t\t});\n\t}\n\n}\n\n","module.exports = require(\"yauzl\");"],"sourceRoot":""}